"use client"

import { useState, useEffect } from "react"
import Navbar from "@/components/navbar"
import Link from "next/link"
import { ArrowLeft } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { marked } from "marked"

// Course metadata
const courseData = {
  title: "Blockchain Layer 1s: Fundamentos, Arquitectura y Ecosistema",
  description:
    "Explora el coraz√≥n de las blockchains: las Capa 1. Aprende c√≥mo funcionan Bitcoin, Ethereum, Stellar y otras redes desde su arquitectura t√©cnica hasta sus ecosistemas, capacidades de escalado e interoperabilidad.",
  level: "Beginner",
  introduction: `
# üß± Introducci√≥n a las Blockchains de Capa 1

Las blockchains de Capa 1 (Layer 1) son la base de toda la infraestructura descentralizada. Son responsables de procesar transacciones, mantener la seguridad y permitir la ejecuci√≥n de contratos inteligentes.

Este curso va m√°s all√° de lo b√°sico y te llevar√° por un recorrido completo a trav√©s de las principales redes L1 ‚Äî Bitcoin, Ethereum, Stellar ‚Äî y conceptos cr√≠ticos como escalabilidad, interoperabilidad y dise√±o de nuevas blockchains.

![Layer 1 Networks Overview](/images/courses/layer-1/layer-1-overview.png)

## üåç ¬øQu√© aprender√°s?

- Qu√© es una blockchain de Capa 1 y c√≥mo se diferencia de una L2
- C√≥mo funciona la arquitectura t√©cnica de Bitcoin, Ethereum y Stellar
- Cu√°les son sus mecanismos de consenso, modelos de cuentas y dise√±o econ√≥mico
- Qu√© retos enfrentan y c√≥mo est√°n evolucionando (L2s, rollups, smart contracts, etc.)
- C√≥mo interact√∫an entre s√≠ mediante interoperabilidad y Layer 0s
- Cu√°ndo vale (y no vale) la pena construir una nueva L1

  `,
  subtopics: [
    {
      id: "what-is-blockchain",
      title: "Introducci√≥n a las Blockchains de Capa 1",
      content: `
## **1.1 ¬øQu√© es una Blockchain de Capa 1?**

- **Definici√≥n**: Una blockchain de Capa 1 (L1) es la red base que procesa y finaliza transacciones sin depender de otra red. Mantiene su propio mecanismo de consenso, libro mayor y toda su infraestructura.

![Layer 1 Networks Overview](/images/courses/layer-1/ayer-1-triangle.png)

- **Caracter√≠sticas clave**:
  - Token nativo (por ejemplo: BTC, ETH, XLM)
  - Disponibilidad de datos *on-chain*
  - Seguridad integrada (a trav√©s de mineros o validadores)


![Layer 1 Networks Overview](/images/courses/layer-1/layer-1-overview.png)


## **1.2 Responsabilidades Clave de las Capas 1**

- **Seguridad**: Asegura la integridad de las transacciones (por ejemplo, inmutabilidad gracias al consenso)
- **Consenso**: Mecanismo por el cual los participantes acuerdan el estado de la red (PoW, PoS, SCP, etc.)
- **Disponibilidad de datos**: Historial completo accesible para validadores y usuarios
- **Ejecuci√≥n**: Procesamiento de contratos inteligentes y transacciones

## **1.3 El Trilema de la Blockchain**

El Trilema de la Blockchain, acu√±ado por Vitalik Buterin, describe la dificultad de optimizar simult√°neamente tres propiedades:

1. **Descentralizaci√≥n** ‚Äì Qu√© tanto se distribuye el control y la toma de decisiones
2. **Seguridad** ‚Äì Resistencia a ataques y protecci√≥n de datos
3. **Escalabilidad** ‚Äì Capacidad de manejar muchas transacciones de forma r√°pida y econ√≥mica

![Layer 1 Networks Overview](/images/courses/layer-1/blockchain-trilemma.png)



## **1.4 Trade-offs en las Principales Capas 1**

| Blockchain        | Optimizan                        | Sacrifican         | Comentario                                               |
|------------------|----------------------------------|--------------------|----------------------------------------------------------|
| **Bitcoin**       | Seguridad, Descentralizaci√≥n     | Escalabilidad      | Robusto y confiable, pero lento y limitado en TPS        |
| **Ethereum (antes de escalado)** | Seguridad, Descentralizaci√≥n | Escalabilidad      | Congesti√≥n y altos fees debido a su enfoque en dApps     |
| **Solana**        | Escalabilidad, Rendimiento       | Descentralizaci√≥n  | Alta velocidad, pero requisitos t√©cnicos altos           |
| **Ripple (XRP)**  | Escalabilidad, Seguridad         | Descentralizaci√≥n  | Algoritmo propio, validadores confiables                 |
| **Stellar**       | Escalabilidad, Seguridad         | Algo de descentralizaci√≥n | Consenso eficiente (SCP), ideal para pagos             |

## **1.5 Capa 1 vs. Capa 2**

- **Capa 1**: Maneja la seguridad base, consenso y datos principales
- **Capa 2**: Se construye encima para escalar transacciones (rollups, sidechains, canales de pago)
![Layer 1 Networks Overview](/images/courses/layer-1/layer-1-triangle.png)

## **1.6 Evoluci√≥n del Dise√±o de Capas 1**

### üü¶ Primera Generaci√≥n ‚Äì *Bitcoin (2009)*
- Efectivo digital peer-to-peer
- Modelo UTXO, consenso PoW
- Alta descentralizaci√≥n, baja programabilidad

### üü® Segunda Generaci√≥n ‚Äì *Ethereum (2015), Ripple (2012)*
- Ethereum: contratos inteligentes, dApps
- Ripple: enfoque en pagos bancarios r√°pidos
- Introducci√≥n del modelo de cuentas

### üü© Rutas Alternativas (2da Gen) ‚Äì *Stellar (2014)*
- Fork de Ripple con enfoque en inclusi√≥n financiera
- Emisi√≥n de activos, consenso SCP
- Soporte actual para contratos inteligentes con **Soroban**

### üü• Tercera Generaci√≥n ‚Äì *Cardano, Polkadot, Cosmos, Solana*
- Interoperabilidad y escalabilidad
- Arquitectura modular (Cosmos SDK, Substrate)
- Nuevos mecanismos de consenso (Ouroboros, Tendermint)

### üîµ Tendencias Futuras
- **Capas 1 espec√≠ficas para aplicaciones** (Sui, Aptos con Move)
- **Cadenas centradas en disponibilidad de datos** (Celestia)
- Integraci√≥n de tecnolog√≠as como **ZK proofs**, **IA en cadena**, entornos modulares



<!-- üîó Recursos recomendados:
- https://ethereum.org/en/roadmap/
- https://docs.cosmos.network/
- https://soroban.stellar.org/
-->
`,
    },
    {
      id: "Bitcoin",
      title: "Bitcoin",
      content: `
![Layer 1 Networks Overview](/images/courses/layer-1/bitcoin.png)

- **Creado por**: Satoshi Nakamoto (whitepaper en 2008)
- **Caso de uso principal**: Reserva de valor digital y moneda peer-to-peer
- **Propiedades clave**:
  - Suministro finito: 21 millones de BTC
  - Sin permisos (*permissionless*), resistente a la censura
  - Alta seguridad gracias a Proof of Work (PoW)

![Layer 1 Networks Overview](/images/courses/layer-1/bitcoin-genesis-block.png)

---

## **2.2 Arquitectura T√©cnica**

- **Mecanismo de Consenso**: Proof of Work (Nakamoto Consensus)
  - Los mineros compiten resolviendo acertijos criptogr√°ficos (SHA-256)
  - Alto consumo energ√©tico, pero muy seguro

- **Modelo UTXO (Unspent Transaction Output)**:
  - Cada transacci√≥n consume salidas existentes y genera nuevas
  - Mejora la escalabilidad y privacidad

- **Tiempo de bloque**: ~10 minutos
- **Finalidad de transacci√≥n**: Alcanzada tras m√∫ltiples confirmaciones (usualmente 6)

![Layer 1 Networks Overview](/images/courses/layer-1/UTXO.png)

---

## **2.3 Limitaciones de Bitcoin**

- **Escalabilidad**: ~7 transacciones por segundo (TPS)
- **Contratos inteligentes**: Lenguaje Script limitado y no Turing completo
- **Latencia**: Confirmaciones toman tiempo (no ideal para pagos minoristas)

---

## **2.4 Extensiones y Capas 2 en Bitcoin**

### üîÅ **A. Lightning Network**

- **Objetivo**: Microtransacciones instant√°neas y con bajas comisiones
- **C√≥mo funciona**:
  - Canales de pago *off-chain* entre usuarios
  - Solo los balances finales se liquidan *on-chain*

- **Ventajas**:
  - Pagos escalables y r√°pidos
  - Reduce la carga sobre la Capa 1

- **Desventajas**:
  - Requiere enrutamiento de liquidez
  - Puede ser complejo para el usuario final

### üåä **B. Liquid Network (de Blockstream)**

- *Sidechain* para transacciones m√°s r√°pidas y confidenciales
- Consenso federado con "funcionarios" (*functionaries*)
- **Enfoque**: uso institucional y emisi√≥n de tokens (stablecoins, valores financieros)

### ‚öôÔ∏è **C. RSK (Rootstock)**

- Contratos inteligentes sobre Bitcoin v√≠a una *sidechain* de *merge-mining*
- Compatible con EVM (Ethereum)
- Combina la seguridad de Bitcoin con la programabilidad de Ethereum

### üìö **D. Stacks**

- Contratos inteligentes y DeFi en Bitcoin con modelo PoX (*Proof of Transfer*)
- Las apps se liquidan sobre Bitcoin, pero ejecutan l√≥gica en otra capa

---

## **2.5 Filosof√≠a y Cultura de Desarrollo**

- **Minimalismo y Conservadurismo**: Los cambios son lentos, deliberados y deben ser retrocompatibles
- **BIPs (Bitcoin Improvement Proposals)**: Propuestas formales para actualizar el protocolo
- **Actualizaciones clave**: *SegWit*, *Taproot* (mejoran escalabilidad y privacidad)

> üìå Repositorio de BIPs: https://github.com/bitcoin/bips

---

## **2.6 Ecosistema en Evoluci√≥n**

- Soluciones de **custodia**, **ETFs de Bitcoin** e integraci√≥n institucional
- Creciente inter√©s en:
  - **DeFi nativo en Bitcoin** (Stacks, RSK)
  - **NFTs Ordinales** y **tokens BRC-20** (usando Taproot y witness data)

---

## Recursos recomendados

<!-- Puedes enlazar estos en tu app usando √≠conos o botones bonitos -->

- üßæ Whitepaper original de Bitcoin: https://bitcoin.org/bitcoin.pdf  
- üì∫ Explicaci√≥n en video (Andreas Antonopoulos): https://www.youtube.com/watch?v=l1si5ZWLgy0  
- üìö Repositorio de BIPs: https://github.com/bitcoin/bips  
- üîó Lightning Network visual: https://1ml.com/

---


      `,
    },
    {
      id: "ethereum",
      title: "Ethereum",
      content: `
# üåê Ethereum

![Layer 1 Networks Overview](/images/courses/layer-1/ethereum.png)


- **Lanzado en**: 2015 por Vitalik Buterin y su equipo
- **Objetivo**: Una blockchain programable para aplicaciones descentralizadas (dApps)
- **Innovaci√≥n clave**: **Contratos inteligentes** ‚Äî c√≥digo autoejecutable almacenado y ejecutado en la cadena
- **Moneda nativa**: ETH, utilizada para pagar *gas* (comisiones computacionales)

---

## Arquitectura T√©cnica

- **Modelo basado en cuentas**:
  - Dos tipos de cuentas: Cuentas Externas (EOAs) y Cuentas de Contrato
  - M√°s simple para la interacci√≥n entre contratos que el modelo UTXO

- **M√°quina Virtual de Ethereum (EVM)**:
  - Entorno de ejecuci√≥n aislado (*sandboxed*)
  - Permite ejecutar la l√≥gica de dApps de forma confiable y sin necesidad de confianza (*trustless*)

- **Lenguajes de Contrato Inteligente**: Principalmente **Solidity**, tambi√©n **Vyper**

- **Consenso**:
  - Anteriormente Proof of Work ‚Üí ahora **Proof of Stake** (desde **The Merge**, 2022)
  - Validadores aseguran la red apostando ETH

  ![Layer 1 Networks Overview](/images/courses/layer-1/PoWPoS.png)

---

## **2.3 Limitaciones de Ethereum**

- **Escalabilidad**: Mainnet puede procesar ~15 TPS
- **Comisiones de Gas**: Aumentan significativamente durante la congesti√≥n de red
- **Latencia**: La finalidad toma tiempo (aunque mejorada con PoS)

---

## **2.4 Escalado de Ethereum: Capas 2**

La estrategia de Ethereum es la **escalabilidad modular**: mantener la capa base segura y descentralizada, y mover la ejecuci√≥n a entornos m√°s r√°pidos y baratos.
![Layer 1 Networks Overview](/images/courses/layer-1/layer-1-triangle.png)

### üîÅ **Rollups (Estrategia principal de L2)**

- Agrupan m√∫ltiples transacciones *off-chain* y las liquidan en Ethereum
- Dos tipos:

  - **Rollups Optimistas** (ej: Optimism, Base, Arbitrum)
    - Asumen validez a menos que se demuestre lo contrario (*fraud proofs*)
    - Tiempo de retiro retrasado por el per√≠odo de desaf√≠o

  - **ZK-Rollups** (ej: zkSync, Scroll, Starknet)
    - Usan pruebas de conocimiento cero para garantizar validez
    - Finalidad m√°s r√°pida, pero con ingenier√≠a m√°s compleja

### ‚öôÔ∏è **Otros Tipos de L2**

- **Validium**: Datos fuera de la cadena
- **Plasma**: Modelo de cadena jer√°rquica (menos popular hoy)

### üöÄ **L2 Populares en Ethereum**

- **Arbitrum**: Mayor TVL, usa el motor Nitro
- **Optimism**: Base est√° construido sobre √©l; base del OP Stack
- **zkSync**: Pionero en UX de ZK-Rollups
- **Scroll, Polygon zkEVM**: Compatibles con la EVM y usan pruebas ZK

---

## **2.5 Capas 3 (Emergentes)**

Capas construidas *sobre* L2 para necesidades especializadas:

- **Rollups espec√≠ficos de apps**
- **Entornos de ejecuci√≥n privados**
- Ejemplos: Xai (gaming en Arbitrum), L3s para DeFi

A√∫n experimentales, con debate sobre su necesidad vs. zonas L2.

---

## **2.6 Ecosistema de Ethereum**

- Mayor base de desarrolladores de contratos inteligentes
- **Casos de uso clave**:
  - **DeFi**: Uniswap, Aave, MakerDAO
  - **NFTs**: OpenSea, Blur
  - **DAOs y gobernanza en cadena**: ENS, Aragon
  - **Stablecoins**: DAI, USDC, USDT en Ethereum

- **Herramientas e infraestructura**:
  - **Infura**, **Alchemy**: acceso a nodos
  - **Hardhat**, **Foundry**: herramientas de desarrollo
  - **MetaMask**, **WalletConnect**: conexi√≥n de usuarios

---

## **2.7 Futuro de Ethereum**

- **Danksharding y Proto-Danksharding (EIP-4844)**:
  - Introduce ‚Äúblobs‚Äù para reducir costos de rollups en L2

- **Restaking y EigenLayer**:
  - Permite usar ETH apostado para asegurar otros protocolos

- **Verkle Trees, Clientes sin estado**:
  - Mejoras para el rendimiento y escalabilidad de la red

---

## üìö Recursos Recomendados sobre Ethereum

### üî∞ 1. Para Comprender Ethereum

- [**Ethereum.org Learn Hub**](https://ethereum.org/en/learn/) ‚Äî *El mejor punto de partida*. Desde principiante hasta avanzado.
- [**Whitepaper de Ethereum**](https://ethereum.org/en/whitepaper/) ‚Äî Fundamentos y visi√≥n del protocolo.

---

### üßë‚Äçüíª 2. Desarrollo de Contratos Inteligentes

- [**CryptoZombies**](https://cryptozombies.io) ‚Äî Curso gamificado de Solidity.
- [**Ethernaut de OpenZeppelin**](https://ethernaut.openzeppelin.com/) ‚Äî Desaf√≠os de seguridad en Solidity.
- [**Documentaci√≥n de Solidity**](https://docs.soliditylang.org/) ‚Äî Detalles t√©cnicos y buenas pr√°cticas.

---

### üß± 3. Escalado con Capas 2

- [**L2Beat**](https://l2beat.com/) ‚Äî Seguimiento visual de proyectos L2.
- [**Docs de Optimism**](https://docs.optimism.io/)
- [**Docs de Arbitrum**](https://developer.arbitrum.io/)
- [**Docs de zkSync**](https://docs.zksync.io/)

---

### üß† 4. Conceptos Avanzados

- [**Ethereum Yellow Paper**](https://ethereum.github.io/yellowpaper/paper.pdf) ‚Äî Para profundizar en la capa de protocolo.
- [**Ethereum Research Forum**](https://ethresear.ch/) ‚Äî Investigaciones sobre mejoras del protocolo.

---

### üß∞ 5. Herramientas y Ecosistema Dev

- [**Hardhat Docs**](https://hardhat.org/)
- [**Foundry Book**](https://book.getfoundry.sh/)

      `,
    },
    {
      id: "stellar",
      title: "Stellar",
      content: `
# Stellar

  ![Layer 1 Networks Overview](/images/courses/layer-1/stellar.png)

- **Lanzamiento**: 2014 por Jed McCaleb (cofundador de Ripple)
- **Misi√≥n**: Inclusi√≥n financiera y transferencias internacionales de bajo costo
- **Token nativo**: **XLM (Lumen)**
- **Enfoque central**: Transferencia eficiente de activos digitales a trav√©s de fronteras, sin contratos inteligentes generalizados (hasta hace poco)
---

## **2.2 Arquitectura y Consenso**

- **Stellar Consensus Protocol (SCP)**:
  - Variante de **Federated Byzantine Agreement (FBA)**
  - Cada nodo elige un grupo de confianza (llamado **quorum slice**).
  - Cuando varios grupos de confianza se superponen y coinciden, se logra **consenso** (es decir, acuerdo).
  - ¬°Y as√≠ se valida una transacci√≥n de forma segura y r√°pida!

    ![Layer 1 Networks Overview](/images/courses/layer-1/Stellar-consensus.png)

No hay mineros. No hay un jefe. Solo nodos confiando en otros nodos.
  - Ofrece finalidad r√°pida (~5 segundos) y alto rendimiento
  - Compromiso: eficiencia sobre descentralizaci√≥n total

- **Modelo de Cuentas**:
  - Similar al de Ethereum, pero m√°s simple
  - Los activos pueden ser emitidos por *anchors* (instituciones reguladas) y se comercian en la cadena

- **DEX incorporado**:
  - Soporte nativo para *order books* y pagos con rutas
  - Permite intercambios estilo Forex y conversiones autom√°ticas entre activos

---

## **2.3 Casos de Uso Clave**

- **Pagos internacionales**:
  - Stellar impulsa los servicios de remesas en USDC de MoneyGram
  - Los *anchors* conectan sistemas fiat con infraestructura cripto

- **Tokenizaci√≥n**:
  - Monedas fiat, commodities e incluso cr√©ditos de carbono

- **ONGs y distribuci√≥n de ayuda**:
  - Usado por organizaciones como ACNUR (UNHCR) para ayuda programable

---

## **2.4 Soroban ‚Äî Contratos Inteligentes en Stellar**

- **Prop√≥sito**: Traer programabilidad al ecosistema Stellar, similar a Ethereum pero con un enfoque m√°s seguro y eficiente

### üîß **Stack Tecnol√≥gico**:

- Contratos inteligentes basados en **WASM**
- **Rust** como lenguaje principal
- Dise√±ado para:
  - Medici√≥n predecible de *gas*
  - Ejecuci√≥n paralela
  - Componibilidad *on-chain*

### üîê **¬øC√≥mo se diferencia Soroban de Ethereum?**

- **Enfocado en seguridad**: sin reentradas, uso de memoria controlado
- **Costos de gas predecibles**: facilita la planificaci√≥n para desarrolladores
- **Enfoque financiero**: alineado con activos del mundo real y cumplimiento regulatorio

### üßë‚Äçüíª **Experiencia para Desarrolladores**:

- Documentaci√≥n clara y SDKs (como Soroban CLI)
- Incentivos v√≠a el **Stellar Community Fund (SCF)** y programas de adopci√≥n

---

## **2.5 Ecosistema e Interoperabilidad**

- Integraci√≥n con **MoneyGram**, **Circle (USDC)**
- **Alianzas**: IBM World Wire, Flutterwave, entre otros
- Crecimiento de herramientas para desarrolladores alrededor de Soroban
- Aparecen esfuerzos iniciales para conexi√≥n con el ecosistema EVM

---

## üìö Recursos sobre Stellar y Soroban

---

### üî∞ 1. Recursos Introductorios y Oficiales

- [**Portal de Aprendizaje de Stellar**](https://stellar.org/learn)
  - Introducci√≥n amigable a Stellar, con gu√≠as sobre activos, cuentas y *anchors*
- [**SCP explicado**](https://stellar.org/learn/proof-of-agreement)
  - Detalle t√©cnico sobre el protocolo de consenso y *quorum slices*

---

### üõ† 2. Herramientas para Desarrolladores y Documentaci√≥n

- [**Stellar Dev Docs**](https://developers.stellar.org/docs/)
  - Referencia completa para construir sobre Stellar Core
  - Cubre transacciones, pagos con rutas, emisi√≥n de activos y construcci√≥n de wallets

- [**Documentaci√≥n oficial de Soroban**](https://soroban.stellar.org/docs/)
  - Entrada para construir contratos inteligentes en Stellar
  - Incluye:
    - Desarrollo con Rust y WASM
    - Uso de Soroban CLI
    - Almacenamiento, autorizaci√≥n y eventos en contratos

- [**Stellar Quest**](https://quest.stellar.org/)
  - Aprendizaje gamificado con desaf√≠os pr√°cticos y recompensas
  - Nuevas misiones est√°n enfocadas en Soroban

---

### üí° 3. Ejemplos y Tutoriales

- [**Ejemplos de Soroban en GitHub**](https://github.com/stellar/soroban-examples)
  - Plantillas reales: creaci√≥n de tokens, votaci√≥n, DeFi b√°sico

- **Gu√≠as r√°pidas**:
  - [Despliega tu primer contrato Soroban](https://soroban.stellar.org/docs/get-started)
  - [Escribir contratos inteligentes en Rust](https://soroban.stellar.org/docs/learn/writing-your-first-contract)

---

### üåê 4. Ecosistema y Comunidad

- [**Stellar Community Fund (SCF)**](https://communityfund.stellar.org/)
  - Financiamiento para aplicaciones innovadoras y herramientas en Stellar y Soroban


- [**Blog de Stellar**](https://stellar.org/blog)
  - Noticias sobre el crecimiento del ecosistema, casos de uso y avances de Soroban

---

### üé• 5. Videos y Conferencias

- **Stellar Meridian**:
  - Conferencias anuales con charlas sobre el ecosistema y desarrollo en Stellar


      `,
    },
    {
      id: "Interoperabilidad",
      title: "Interoperabilidad y Layer 0",
      content: `

## **3.1 ¬øPor qu√© importa la interoperabilidad?**

- A medida que surgen m√°s blockchains (Layer 1), los activos y aplicaciones se vuelven silos.
- La interoperabilidad permite:
  - **Transferencias de activos entre cadenas** (por ejemplo, ETH a Solana)
  - **dApps intercadena** (liquidez unificada, identidades compartidas, etc.)
  - **Seguridad o consenso compartido** entre cadenas

  ![Layer 1 Networks Overview](/images/courses/layer-1/Layer0.png)
---

## **3.2 Formas de Interoperabilidad**

### ü™ô A. Puentes de Tokens (*Token Bridges*)

- **Qu√© hacen**: bloquean tokens en una cadena y acu√±an versiones envueltas (*wrapped*) en otra
- **Ejemplos**:
  - **Wormhole** ‚Äì puente multichain que conecta Ethereum, Solana, Avalanche, etc.
  - **Portal** ‚Äì puente de tokens basado en Wormhole
  - **Polygon Bridge** ‚Äì conecta Ethereum ‚Üî Polygon

- **Riesgos**:
  - Vulnerabilidades en contratos inteligentes
  - Hist√≥ricos hackeos de puentes (Ronin, Wormhole, Nomad)

---

### üí¨ B. Mensajer√≠a entre Cadenas (*Cross-Chain Messaging*)

- Permite que contratos en una cadena env√≠en mensajes a otra
- **Ejemplos**:
  - **Chainlink CCIP** ‚Äì Protocolo de interoperabilidad entre cadenas
  - **LayerZero** ‚Äì Protocolo de mensajer√≠a *omnichain*
  - **Axelar** ‚Äì Conectividad universal para dApps

---

### üõ° C. Modelos de Seguridad Compartida (*Shared Security*)

- Las plataformas Layer 0 permiten que cadenas de aplicaciones hereden la seguridad de una capa base

- **Ejemplos**:
  - **Polkadot** ‚Äì Las parachains comparten seguridad v√≠a la relay chain
  - **Cosmos Hub** ‚Äì Las zonas pueden alquilar el set de validadores del hub
  - **EigenLayer** ‚Äì Plataforma basada en Ethereum para *restaking* y seguridad compartida

---

## **3.3 Plataformas Layer 0: Infraestructura para Interoperabilidad**

### üåê A. Cosmos (IBC)

- **IBC = Inter-Blockchain Communication**
- Modelo de *hub* y *zonas*
- Cada app puede tener su propia cadena (*appchain*) conectada v√≠a **Cosmos SDK**

- **Ejemplos**:
  - **Osmosis** (DeFi)
  - **Juno** (contratos inteligentes)
  - **Evmos** (cadena compatible con EVM)

---

### üï∏ B. Polkadot

- **Relay Chain** provee seguridad compartida
- **Parachains**: cadenas soberanas que ganan acceso v√≠a subastas
- **XCMP**: sistema de mensajer√≠a entre parachains

- **Ejemplos**:
  - **Acala** (hub DeFi)
  - **Moonbeam** (compatibilidad con EVM)

---

### üèî C. Avalanche (Subnets)

- Se pueden crear m√∫ltiples cadenas como *subnets*, cada una con sus propias reglas y validadores
- Todas conectadas al ecosistema Avalanche y el token AVAX

---

### üß¨ D. Ethereum (como Layer 0 emergente)

- Ethereum evoluciona hacia un papel tipo Layer 0 para sus propias L2s:
  - Las **rollups se liquidan en Ethereum**
  - Uso de **capas de disponibilidad de datos** (como **EIP-4844**) y **secuenciadores neutrales**

---

## **3.4 El Futuro de la Interoperabilidad**

- **dApps multichain componibles**: Operar√°n de forma fluida entre cadenas
- **Gobernanza intercadena**: DAOs coordinando decisiones a trav√©s de varias blockchains
- **Interoperabilidad con ZK**: Uso de pruebas ZK para comunicaci√≥n segura (ej: zkBridge)
- **IA + Interoperabilidad**: Traducci√≥n sem√°ntica de datos y l√≥gica aut√≥noma multichain

---

## üìö Recursos recomendados sobre Interoperabilidad y Layer 0

---


### üåê 2. Cosmos e IBC

- [**Cosmos Academy**](https://academy.cosmos.network/)
  - Cursos interactivos sobre Cosmos SDK, IBC y desarrollo modular
- [**IBC Protocol Docs**](https://ibcprotocol.org/)
  - Gu√≠a t√©cnica para entender mensajer√≠a entre blockchains

---

### üß¨ 3. Polkadot y Parachains

- [**Polkadot Wiki**](https://wiki.polkadot.network/)
  - Documentaci√≥n completa sobre parachains, relay chain, XCMP
- [**Substrate Dev Portal**](https://substrate.dev/)
  - Aprende a lanzar tu propia parachain

---

### üèî 4. Avalanche y Subnets

- [**Docs oficiales de Avalanche**](https://docs.avax.network/)
  - Gu√≠a paso a paso para crear y personalizar subnets

---

### üîó 5. Interoperabilidad en general

- [**Chainlink CCIP Docs**](https://docs.chain.link/ccip/)
- [**LayerZero Docs**](https://docs.layerzero.network/)

---

### ‚ö†Ô∏è 6. Seguridad y Riesgos en Interoperabilidad

- [**Casos de estudio de hacks ‚Äì Rekt.news**](https://rekt.news/)
  - Post-mortems detallados sobre exploits (Ronin, Wormhole, Nomad)


      `,
    },
    {
      id: "Layer1Pros",
      title: "¬øPor Qu√© Construir una Nueva Capa 1 (Layer 1)?",
      content: `

### üöÄ A. Necesidades de Rendimiento y Escalabilidad

- Las cadenas existentes (como Ethereum o Bitcoin) tienen l√≠mites de capacidad y latencia.
- Aplicaciones de alta velocidad (trading de alta frecuencia, videojuegos, finanzas globales) pueden requerir:
  - Entornos de ejecuci√≥n personalizados
  - Paralelizaci√≥n (ej: Solana, Aptos)
  - Finalidad sub-segundo

---

### üèõ B. Gobernanza o Diferencias Ideol√≥gicas

- Algunos equipos buscan estructuras de gobernanza m√°s flexibles y en cadena.
- La insatisfacci√≥n con la gobernanza central de Bitcoin o Ethereum puede llevar a:
  - *Forks* (ej: Ethereum Classic, Bitcoin Cash)
  - Cadenas completamente nuevas con modelos centrados en DAOs (ej: Tezos, Internet Computer)

---

### üîÅ C. Nuevos Mecanismos de Consenso

- La innovaci√≥n en consenso (ej: DAGs, HotStuff, Avalanche, Proof-of-History) puede requerir comenzar desde cero.
- Las cadenas existentes podr√≠an no ser compatibles o lo suficientemente flexibles para adaptarse a estas tecnolog√≠as.

---

### ‚öñÔ∏è D. Regulaci√≥n y Cumplimiento

- Algunas Capa 1 est√°n dise√±adas para entornos regulados, con caracter√≠sticas como:
  - Capas de identidad con KYC
  - Listas blancas de activos
  - Ejemplos: Concordium, Hedera Hashgraph

---

### üß© E. Control de Ecosistema o Vertical

- Proyectos que quieren control total del stack tecnol√≥gico y el modelo econ√≥mico.
- L1s pueden ser dise√±adas para verticales espec√≠ficas:
  - **Finanzas**: Ripple, Stellar
  - **Gaming**: Immutable, Xai
  - **Datos/IA**: Ocean Protocol, Bittensor

---

### üí∞ F. Incentivos Estrat√©gicos y Financieros

- Lanzar una nueva L1 puede:
  - Atraer inversi√≥n de riesgo (VCs)
  - Dise√±ar nuevos modelos econ√≥micos y de tesorer√≠a
  - Construir una comunidad leal alrededor de una narrativa nueva (ej: cadenas modulares, L1s nativas de IA)

---

## **4.2 Estudios de Caso**

- **Solana** ‚Äì Creada para rendimiento extremo (TPS alto, comisiones bajas), con arquitectura basada en *Proof of History*.
- **Aptos y Sui** ‚Äì Fundadas por el equipo de Diem, utilizan el lenguaje *Move*, enfocadas en seguridad y rendimiento.
- **Celestia** ‚Äì Dise√±ada como capa modular de disponibilidad de datos para servir a otras L1s y L2s.
- **Radix** ‚Äì Nueva arquitectura de ejecuci√≥n y lenguaje (*Scrypto*) para evitar problemas de composabilidad estilo Ethereum.

---

## üìö Recursos: ¬øPor Qu√© Construir una Nueva Capa 1?

---

### üß† 1. Contexto Estrat√©gico e Ideol√≥gico


- [**a16z ‚Äì Futuro de las Capa 1**](https://a16zcrypto.com/)
  - Art√≠culos sobre cadenas modulares, appchains y dise√±o de L1s.

---

### üîç 2. An√°lisis T√©cnicos sobre Dise√±o de L1

- [**Documentaci√≥n de Solana**](https://docs.solana.com/introduction)
  - Arquitectura centrada en rendimiento (Proof of History, ejecuci√≥n paralela).
- [**Docs de Sui**](https://docs.sui.io/) y [**Docs de Aptos**](https://aptos.dev/)
  - L1s basadas en Move con modelos de datos novedosos.
- [**Celestia Docs**](https://docs.celestia.org/)
  - Blockchain modular centrada en disponibilidad de datos.
- [**Polkadot Lightpaper**](https://polkadot.network/Polkadot-lightpaper.pdf)
  - Explica por qu√© se construy√≥ una L1 escalable con seguridad compartida.

---

### üíª 3. Lenguajes y Nuevos Entornos de Ejecuci√≥n

- [**Move Language Resources**](https://move-language.github.io/move/)
  - Lenguaje enfocado en seguridad, modularidad y determinismo.

---

### üå± 4. Comunidad y Ecosistema

- [**Playbooks de Layer 1 ‚Äì Messari & Electric Capital**](https://messari.io/)
  - M√©tricas de crecimiento de desarrolladores y estrategias de incentivos de tokens.
- [**Outlier Ventures ‚Äì Base Camp**](https://outlierventures.io/)
  - Aceleradora enfocada en desarrollo de protocolos Web3.



      `,
    },
    {
      id: "Layer1Cons",
      title: "¬øPor Qu√© NO Construir una Nueva Capa 1 (Layer 1)?",
      content: `
# üö´ ¬øPor Qu√© NO Construir una Nueva Blockchain de Capa 1?

Aunque crear una nueva L1 puede parecer atractivo, hay numerosos desaf√≠os t√©cnicos, econ√≥micos y regulatorios. 
---

## **5.1 El Desaf√≠o de los Efectos de Red**

- Las L1 existentes como Ethereum o Solana ya cuentan con:
  - Ecosistemas de desarrolladores enormes
  - Integraciones con wallets y herramientas
  - Confianza institucional y de comunidad

- **Es extremadamente dif√≠cil iniciar desde cero**:
  - Los usuarios van donde est√° la liquidez
  - Los desarrolladores van donde est√°n los usuarios y las herramientas

---

## **5.2 La Seguridad No es Trivial**

- Una L1 necesita una red de validadores o mineros que sea:
  - Descentralizada
  - Incentivada econ√≥micamente
  - Resistente a ataques

- Las nuevas L1 suelen tener conjuntos de validadores peque√±os, lo que las hace:
  - Vulnerables a censura
  - Menos confiables para gobiernos y empresas

---

## **5.3 Bootstrapping de Comunidades de Devs y Usuarios**

- Construir un ecosistema vibrante toma **a√±os**.
- Requiere:
  - Buena documentaci√≥n y SDKs
  - Programas de grants y hackathons
  - Cultura alineada con la comunidad t√©cnica

---

## **5.4 Mantenimiento y Actualizaciones**

- Las L1 necesitan equipos que:
  - Mantengan la l√≥gica de consenso
  - Coordinen upgrades del protocolo v√≠a gobernanza
  - Aseguren compatibilidad hacia atr√°s

> ‚öôÔ∏è Mucho m√°s complejo que construir una dApp o una L2

---

## **5.5 Alternativas Viables: L2s y Appchains**

- Puedes alcanzar tus metas construyendo sobre una L1 existente:
  - **Rollups en Ethereum**: Seguridad + usuarios + costos reducidos
  - **Zonas de Cosmos**: Soberan√≠a sin cargar con seguridad de L1
  - **Parachains de Polkadot**: Seguridad compartida + l√≥gica personalizable
  - **Subnets de Avalanche**: Ejecuci√≥n aislada + econom√≠a a medida

---

## **5.6 Riesgos Regulatorios y de Dise√±o de Token**

- Lanzar una L1 implica crear un token nativo:
  - Esto atrae **atenci√≥n regulatoria** (especialmente en EE.UU.)
  - Requiere un modelo econ√≥mico sostenible

- Incentivos mal dise√±ados pueden crear ecosistemas tipo **"pump and dump"** en lugar de valor real

---

## **5.7 Sustentabilidad y Viabilidad a Largo Plazo**

- Si tu L1 no gana tracci√≥n:
  - Puede tener un set de validadores inseguro
  - No genera tarifas suficientes para sostenerse
  - Puede ser abandonada o bifurcada

---


Fin :)
      `,
    },
  ],
  nextCourse: {
    slug: "layer-1",
    title: "Layer 1 Blockchains",
  },
}

// Custom component to render markdown with support for images and videos
function MarkdownContent({ content }: { content: string }) {
  const [html, setHtml] = useState("")
  // Parse markdown to HTML
  useEffect(() => {
    async function parseMarkdown() {
      const parsed = await marked.parse(content)
      setHtml(parsed)
    }
    parseMarkdown()
  }, [content])

  return (
    <div
      className="prose max-w-none prose-img:rounded-lg prose-headings:text-rebel-black prose-a:text-rebel-red"
      dangerouslySetInnerHTML={{ __html: html }}
    />
  )
}

export default function BlockchainFundamentalsPage() {
  const [openAccordion, setOpenAccordion] = useState<string>("what-is-blockchain")

  return (
    <main className="min-h-screen bg-white text-rebel-black">
      <Navbar />
      <div className="max-w-4xl mx-auto px-4 sm:px-6 pt-24 pb-16">
        <div className="mb-8">
          <Button variant="ghost" className="mb-4 -ml-4 text-rebel-red" asChild>
            <Link href="/learn">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Topics
            </Link>
          </Button>

          <h1 className="text-5xl font-bold mb-4">{courseData.title}</h1>
          <div className="flex items-center mb-6">
            <span className="bg-rebel-light text-rebel-black px-3 py-1 rounded-full text-sm">{courseData.level}</span>
          </div>
          <p className="text-xl mb-8">{courseData.description}</p>
        </div>

        <MarkdownContent content={courseData.introduction} />

        <div className="mb-12 mt-12">
          <h2 className="text-3xl font-bold mb-6">Subtopics</h2>

          <Accordion type="multiple" >
            {courseData.subtopics.map((subtopic) => (
              <AccordionItem
                key={subtopic.id}
                value={subtopic.id}
                className="border border-rebel-gray rounded-lg mb-4 overflow-hidden"
              >
                <AccordionTrigger className="px-6 py-4 hover:bg-rebel-light hover:no-underline">
                  <h3 className="text-xl font-medium text-left">{subtopic.title}</h3>
                </AccordionTrigger>
                <AccordionContent className="px-6 py-4 bg-white">
                  <MarkdownContent content={subtopic.content} />
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </div>

        <div className="bg-rebel-light p-8 rounded-xl border border-rebel-gray shadow-sm">
          <h3 className="text-2xl font-bold mb-4">Continue Learning</h3>
          <p className="mb-6">Ready to dive deeper into blockchain technology? Explore our other learning resources.</p>
          <div className="flex flex-wrap gap-4">

            <Button variant="outline" asChild>
              <Link href="/learn">All Topics</Link>
            </Button>
          </div>
        </div>
      </div>
    </main>
  )
}

